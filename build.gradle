apply plugin: 'java'

/************************ system variables ************************/
def env         = System.getenv()

def javaHome    = env["JAVA_HOME"]

//TODO: copy from CF Inference, need refactor later on
//determined based on the the version of the currently running JVM
def jreVersion  = {
    def envJreVersion = env["CFI_JRE_VERSION"];
    if(envJreVersion == null) {
        def jreVersionStr  = System.getProperty("java.version");
        def matches        = ( jreVersionStr =~ /^(\d\.\d+)\..*$/ )

        final double jreVer;
        if(matches.matches()) {
            jreVer = Double.parseDouble(matches.group(1));
        } else {
            throw new RuntimeException("Could not determine version from property java.version=" + jreVersionStr);
        }

        return jreVer
    } else {
        return envJreVersion;
    }
}.call()

/************************ jsr308 variables ************************/
def jsr308Dir   = env["JSR308"] ?: file(new File("..")).absolutePath

def jsr308_langtoolsDir = (jsr308Dir + "/jsr308-langtools")

def annotationToolsDir = jsr308Dir + "/annotation-tools"

def checkerFrameworkDir = jsr308Dir + "/checker-framework"

def cfInferenceDir = jsr308Dir + "/checker-framework-inference"

// dir of generic type inference solver 
def gtisDir = jsr308Dir + "/generic-type-inference-solver"

def ontologyDir = jsr308Dir + "/ontology"

/************************ util functions ************************/
//Closure that creates a file from a base directory and a name of the file in that directory
def fromBaseDir   = { baseDir, child -> baseDir ? new File(baseDir, child) : new File(child)  }

//A function that, given a file name, creates a file object of that name with 
//checkersDir as its parent
def checkerFrameworkChild = fromBaseDir.curry(checkerFrameworkDir)

def cfInferenceChild = fromBaseDir.curry(cfInferenceDir)

/************************ build variables ************************/
//JarsToPackage contains both all members that should be on the classpath for this build
// should use `+` operation at the end of a line which would means "append" in groovy
// http://stackoverflow.com/questions/31044673/groovy-postgres-no-signature-of-method-java-lang-string-positive
def jarsToPackage = [//checker relative paths
                        "checker/dist/checker.jar",
                    ].collect { checkerFrameworkChild(it).getAbsolutePath() } +
                    [
                        "dist/checker-framework-inference.jar",
                    ].collect { cfInferenceChild(it).getAbsolutePath() }

def gtisClasspath = gtisDir+"/bin"

//A list of files to append to the class path during compilation
def toPackageClasspath = files(
    jarsToPackage
    + gtisClasspath
)

/************************ java plugin arguments ************************/
repositories {
    mavenCentral()
}

dependencies {
    // solver backend dependencies
    // TODO: should be removed when we get rid of classic solver
    // TODO: currently the runtime dependencies of sat4j is bit tricky --- it actually uses the sat4j from cfi/dist
    //       should we also snapshot a copy of sat4j from mavenCentral into ontology?
    compile 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.4'
    compile 'org.ow2.sat4j:org.ow2.sat4j.maxsat:2.3.4'
    compile fileTree(dir: "lib", include: ['*.jar'])
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDir "src"
        }

        resources {
            srcDir "src"
        }

        //Leads to a dir structure of "checker-framework-inference/bin/checkers/...classes...
        output.classesDir "bin"
        compileClasspath += toPackageClasspath
        compileClasspath += files("bin")
    }

    test {
        java {
            srcDirs = ["tests/ontology"]
            include "**/*.java"
            compileClasspath += toPackageClasspath
            runtimeClasspath += compileClasspath
        }
    }
}

task copyZ3 (type: Copy) {
    from cfInferenceDir + "/lib/com.microsoft.z3.jar" into file('lib/')
}

//Switch the Javac used to the JSR308
tasks.compileJava {
  description = 'Compiles this project using the jsr308 compiler.'
  options.fork = true
  options.compilerArgs = [
      '-implicit:class',
      '-Awarns', '-Xmaxwarns', '10000']
  if(jreVersion == 1.7) {
    options.compilerArgs += ['-source' , '7', '-target', '7']
  }
  options.forkOptions.executable="$jsr308_langtoolsDir/dist/bin/javac"
} dependsOn(copyZ3)


tasks.clean {
    delete += "bin"
    delete += "dist"
}

test {
    systemProperty "path.afu.scripts", "$annotationToolsDir/annotation-file-utilities/scripts"
    systemProperty "path.inference.script", "$cfInferenceDir/scripts/inference"
    environment "external_checker_classpath", "$ontologyDir/bin"
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat = 'full'
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams true
    }
    jvmArgs "-Xbootclasspath/p:$cfInferenceDir/dist/javac.jar"
}

libsDirName="../dist"
